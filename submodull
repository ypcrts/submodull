#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'yaml'
require 'logger'
require 'pathname'
require 'git'


class Submodull < Thor

  class_option :verbose, :type => :boolean, :aliases => "-v"
  class_option :debug, :type => :boolean, :aliases => "-d"
  class_option :config, :type => :string, :aliases => "-c", :desc => "Use an alternative YAML config file."
  class_option :family, :default => "pathogens", :type => "string"
  def initialize(*args)
    super
    raise 'Dont\'t be an idiot. Excess privilege use violation.' if Process.uid == 0

    @log = Logger.new(STDOUT)
    @log.datetime_format=("%Y%m%dT%H%M%S%Z")
    if options[:debug]
      @log.level = Logger::DEBUG
      @log.info("Logger level set to DEBUG")
    elsif options[:verbose]
      @log.level = Logger::INFO
      @log.info("Logger level set to INFO")
    else
      @log.level = Logger::WARN
      @log.info("Logger level defaulting to WARN")
    end

    @log.debug("initalize: selecting config file")
    config_try = Proc.new { |file| @config_file=file if (not defined? @config_file) and File::file?(file) and File::readable?(file) }
    if options[:config] =~ /\//
      config_try.call(options[:config])
    elsif options[:config] == "vim"
      config_try.call("#{ENV['XDG_CONFIG_HOME'] || ENV['HOME'] + '/.config' || '~/.config'}/submodull/#{options['config']}.yaml")
    end
    config_try.call("#{ENV['HOME'] || '~'}/.vim/submodull.yaml")
    config_try.call("#{ENV['XDG_CONFIG_HOME'] || ENV['HOME'] + '/.config' || '~/.config'}/submodull/submodull.yaml")
    raise "No configuration file found, tried #{config_files.inspect}" unless defined? @config_file
    File::chmod(0744,@config_file) if not File::stat(@config_file).mode =~ /.*744/

    @log.debug("initialize: loading YAML config file #{@config_file}")
    @config = YAML.load_file(@config_file)
    raise "Configuration empty or YAML file corrupt. Available data is:\n #{@config.inspect}" if @config.empty?

    self.crosscheck

    if options[:family] then
      self.loadFamily(options[:family])
      ### Two methods of manipulating git repos follow:
      ## 1. USE SHELL COMMANDS
      # execute in @gitroot
      Dir.chdir(@gitroot)

      
      ## 2. USE GIT GEM
      # determine gitmeta
      if @gitcmd=~ /vcsh/ then
        gitdir="#{ENV['HOME']}/.config/vcsh/repo.d/" + @gitcmd[/(vcsh\s)(run\s)?(\S*)(\sgit)?/i, 3] + ".git"
        gitmeta = { repository: gitdir, index: gitdir + "/index" }
      else
        gitmeta = Hash::new
      end
      @git = Git.open(@gitroot.to_s, gitmeta)
    end

  end

  no_tasks do

  def loadFamily(family)

    # Git
    if defined? @config[family]['git'] 
      if @config[family]['git'] =~ /^(git|vcsh.*)/
        @gitcmd= @config[family]['git']
        @log.debug("initalize: config specified git command replacement #{@gitcmd}")
      else
        @log.info("initialize: config specified invalid git command replacement #{@config[family][:git]}, which does not match my regex.")
        @log.error("The configuration file has an error on the node 'git' under the family #{@family}; it should be set to git or vcsh <reponame>.")
      end
    else
      @log.debug("initalize: config does not specify git command replacement, using default 'git'. OK.")
      @gitcmd= "git"
    end

    # gitroot
    if defined? @config[family]['gitroot']
      @log.debug("initialize: config specified gitroot.")
      @gitroot = Pathname.new(@config[family]['gitroot']).expand_path
    else
      @log.debug("initialize: config does not specify gitroot; using $HOME.")
      @gitroot = Pathname.new(ENV['HOME'] || '~').expand_path
    end

    # Target
    if defined? @config[family]['target']
      @log.debug("initialize: config specified target.")
      @target = Pathname.new(@config[family]['target']).expand_path.relative_path_from(@gitroot)
    else
      @log.debug("initialize: config does not specify target.")
      @log.error("The configuration file is missing the 'target' element under #{family}. Cannot continue.")
    end

    # Repos
    if defined? @config[family]['repos']
      if @config[family]['repos'].is_a?(::Hash)
        @log.debug("initialize: repos is a valid hash")
        @repos = @config[family]['repos']
      else
        @log.error("The configuration file has an error under the 'repos' element of '#{family}'. This element must be a hash (repourl: reponame).")
      end
    else
      @log.error("The configuration file is missing a hash of repos under #{family}.")
    end

  end

  desc 'crosscheck', "Perform sanity crosschecks of environment and YAML configuration."
  def crosscheck()
    # ruby > 2.1
    @log.debug("crosscheck: ruby > 2.1")
    if not RUBY_VERSION >= "2.1.0"
      @log.error("I need ruby >= 2.1.0 but you're running me on #{RUBY_VERSION}. #sadface ")
      Kernel.exit(-1) 
    end

    # git > 2
    @log.debug("crosscheck: git > 2")
    if not system("command -v git > /dev/null 2>&1") 
      @log.error("I need git >= 2.0, but I couldn't find any git at all. #tragedy")

    elsif %x{git --version}.match(/[0-9\.]{3}/).to_s < "2.0"
      @log.error("I need git >= 2.0, but I found " + %x{git --version}.match(/[0-9prcb\.]{3,11}/))
    end

  end
  end

  method_option :squash, :default => false, :type => :boolean, :desc => "Squash each added subtree repo history"
  method_option :'dry-run', :type => :boolean, :desc => "Show what would be done, without doing it."
  desc 'add', "Add subtrees under FAMILY in YAML config"
  def add()
    @log.debug("addsubtrees: got options=#{options.inspect}")
    @log.debug("addsubtrees: got dry-run") if options['dry-run']
    @log.debug("addsubtrees: got squash") if options['squash']



    # command="git subtree add --squash --prefix .vim/pathogens/#{name} #{repo} master"
    addcmd = "#{@gitcmd} subtree add"
    addcmd << " --squash" if options['squash']
    addcmd << " -d" if options['debug']
  
    @repos.each do | repourl, reponame |
      unit_command = addcmd.clone
      unit_command << " --message='[#{reponame}] add, pull master'"
      unit_command << " --prefix=#{@target}/#{reponame} #{repourl} master"
      
      #check if the repo is already a subtree or exists
      if File::exists?(@gitroot + "/" + @target + "/" + reponame)
        @log.info(reponame + " exists, skipping.")
      elsif options[:'dry-run']
        @log.info("$ " + unit_command)
      else
        system(unit_command)
      end

    end

  end


  desc :remotes, "Update remotes to comply with a FAMILY in YAML config."
  def remotes()

    # remove remotes that are noncompliant with family
    compliantremotes = Hash::new
    @git.remotes.each do | remotename, remoteurl |
      if (not remotename    == 'origin') and             # leave origin alone
         (not remotename     = ~ /manual/i)   &&           # leave anything with 'manual' alone
        ( (@repos.has_value?(remotename) and            # for remotes whose names are in this family
          remoteurl != @repos.key(remotename)) ||          # for remotes whose urls do not match the family
         (@repos.has_key?(remoteurl) and                # for remotes whose urls are in this family
          @repos[remoteurl] != remotename) )              # for remotes whose names do not match the family
      then
        @git.remote(remotename).remove                      # remove the remote
      else
        compliantremotes[remotename]=true               # otherwise do not touch this remote
      end
    end

    @repos.each do | remoteurl, remotename |

      unless compliantremotes[remotename] then
        # command = " git remote add subtreename repourl"

        @git.add_remote(remotename,remoteurl)

      end
    end

  end


  desc :repo, "The name of the repo to pull."
  desc "pull REPO", "Update the subtrees of FAMILY in YAML config."
  def pull(repo='ALL')
    # command = git subtree pull -P #{@target}/#{reponame} #{repourl} master"
    action= Proc.new { |remoteurl,remotename| system("#{@gitcmd} subtree pull --message='[#{remotename}] pull master' --prefix=#{@target}/#{remotename} #{remotename} master ") }
    
    if repo == 'ALL'
      @repos.each do | remoteurl,remotename |
        action.call(remoteurl,remotename)
      end

    elsif @repos.has_value?(repo) 
      repourl=@repos.key(repo)
      action.call(repourl,repo)
    
    else
      @log.error("No such repo #{repo} found in family #{@options[:family]}")
    end
  end
end
Submodull.start
# vim: set ts=2 sts=2 ft=ruby fdm=marker sw=2 et:
